{
	"info": {
		"_postman_id": "49b6f7b3-202e-4a10-9f4d-775585a2143a",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"let jsonData = pm.response.json();\r",
							"let name_user = jsonData.name;\r",
							"let age_user = jsonData.age;\r",
							"let salary_user = jsonData.salary;\r",
							"\r",
							"pm.test(\"Test name\", function () {\r",
							"    pm.expect(name_user).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"pm.test(\"Test age\", function () {\r",
							"    pm.expect(age_user).to.eql(pm.environment.get(\"age\"));\r",
							"});\r",
							"pm.test(\"Test salary\", function () {\r",
							"    pm.expect(salary_user).to.eql(+pm.environment.get(\"salary\"));\r",
							"});\r",
							"\r",
							"let req = request.data;\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"\r",
							"pm.test(\"Test request name\", function () {\r",
							"    pm.expect(name_user).to.eql(req_name);\r",
							"});\r",
							"pm.test(\"Test request age\", function () {\r",
							"    pm.expect(age_user).to.eql(req_age);\r",
							"});\r",
							"pm.test(\"Test request salary\", function () {\r",
							"    pm.expect(salary_user).to.eql(+req_salary);\r",
							"});\r",
							"\r",
							"let family_user = jsonData.family;\r",
							"console.log(family_user);\r",
							"\r",
							"let u_salary_1_5 = req.salary*4;\r",
							"pm.test(\"Test request u_salary_1_5\", function () {\r",
							"    pm.expect(family_user.u_salary_1_5_year).to.eql(u_salary_1_5);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "token",
							"value": "/s34lfgbj/None/jjd909/6706kjkWpqc2202None78869evny",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}/login?login=Julia&password=45otkrogkt5465",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					],
					"query": [
						{
							"key": "login",
							"value": "Julia"
						},
						{
							"key": "password",
							"value": "45otkrogkt5465"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"let jsonData = pm.response.json();\r",
							"let name_user = jsonData.name;\r",
							"let age_user = jsonData.age;\r",
							"let salary_user = jsonData.salary;\r",
							"\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"\r",
							"pm.test(\"Test  name\", function () {\r",
							"    pm.expect(name_user).to.eql(req_name);\r",
							"});\r",
							"pm.test(\"Test  age\", function () {\r",
							"    pm.expect(age_user).to.eql(req_age);\r",
							"});\r",
							"pm.test(\"Test  salary\", function () {\r",
							"    pm.expect(salary_user).to.eql(+req_salary);\r",
							"});\r",
							"\r",
							"let family_user = jsonData.family;\r",
							"console.log(family_user);\r",
							"\r",
							"pm.test(\"Test property name\", () => {\r",
							"  pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"pm.test(\"Test property age\", () => {\r",
							"  pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"pm.test(\"Test  name dog\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"pm.test(\"Test  age dog\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"let jsonData = pm.response.json();\r",
							"let name_user = jsonData.name;\r",
							"let age_user = jsonData.age;\r",
							"let salary_user = jsonData.salary;\r",
							"\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"\r",
							"pm.test(\"Test  name\", function () {\r",
							"    pm.expect(name_user).to.eql(req_name);\r",
							"});\r",
							"pm.test(\"Test  age\", function () {\r",
							"    pm.expect(age_user).to.eql(+req_age);\r",
							"});\r",
							"\r",
							"console.log(salary_user);\r",
							"console.log(req_salary);\r",
							"console.log(salary_user[0]);\r",
							"console.log(salary_user[1]);\r",
							"console.log(salary_user[2]);\r",
							"\r",
							"let req_salary1 = String(req_salary*2);\r",
							"let req_salary2 = String(req_salary*3);\r",
							"pm.test(\"Test  salary[0]\", function () {\r",
							"    pm.expect(salary_user[0]).to.eql(+req_salary);\r",
							"});\r",
							"pm.test(\"Test  salary[1]\", function () {\r",
							"    pm.expect(salary_user[1]).to.eql(req_salary1);\r",
							"});\r",
							"pm.test(\"Test  salary[2]\", function () {\r",
							"    pm.expect(salary_user[2]).to.eql(req_salary2);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"name\", name_user);\r",
							"pm.environment.set(\"age\", age_user);\r",
							"pm.environment.set(\"salary\", salary_user);\r",
							"\r",
							"for(i in salary_user){\r",
							"    console.log(salary_user[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Julia&age=28&salary=1200",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Julia"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1200"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"let jsonData = pm.response.json();\r",
							"let name_user = jsonData.name;\r",
							"let age_user = jsonData.age;\r",
							"let salary_user = jsonData.salary;\r",
							"\r",
							"let req = request.data;\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"\r",
							"pm.test(\"Test property start_qa_salary\", () => {\r",
							"  pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							"});\r",
							"pm.test(\"Test property qa_salary_after_6_months\", () => {\r",
							"  pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"pm.test(\"Test property qa_salary_after_12_months\", () => {\r",
							"  pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"pm.test(\"Test property qa_salary_after_1.5_year\", () => {\r",
							"  pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"pm.test(\"Test property qa_salary_after_3.5_years\", () => {\r",
							"  pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"pm.test(\"Test property person\", () => {\r",
							"  pm.expect(jsonData).to.have.property('person');\r",
							"});\r",
							"\r",
							"pm.test(\"Test request start_qa_salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"let salary_after_6_months = Number(req.salary)*2;\r",
							"pm.test(\"Test request qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary_after_6_months);\r",
							"});\r",
							"let salary_after_12_months = Number(req.salary)*2.7;\r",
							"pm.test(\"Test request qa_salary_after_12_months \", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary_after_12_months );\r",
							"});\r",
							"let salary_after_1_5_year = Number(req.salary)*3.3;\r",
							"pm.test(\"Test request qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(salary_after_1_5_year);\r",
							"});\r",
							"let salary_after_3_5_years = Number(req.salary)*3.8;\r",
							"pm.test(\"Test request qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(salary_after_3_5_years);\r",
							"});\r",
							"\r",
							"pm.test(\"Test request u_name\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Test request u_age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"let salary_5_years = Number(req.salary)*4.2;\r",
							"pm.test(\"Test request u_salary_5_years\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(salary_5_years);\r",
							"});\r",
							"\r",
							"for(i in jsonData.person){\r",
							"    console.log(\"key:\", i, \"value:\", jsonData.person[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
